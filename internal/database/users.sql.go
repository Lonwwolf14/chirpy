// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    email,
    created_at,
    updated_at
)
VALUES(
    $1,
    $2,
    $3,
    $4
)
RETURNING id, email, created_at, updated_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	Email     string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :many
TRUNCATE TABLE users
`

type DeleteUsersRow struct {
}

func (q *Queries) DeleteUsers(ctx context.Context) ([]DeleteUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, deleteUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeleteUsersRow
	for rows.Next() {
		var i DeleteUsersRow
		if err := rows.Scan(); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
